{"message":"unused import: `std::ops::Range`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":100,"byte_end":115,"line_start":4,"line_end":4,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use std::ops::Range;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":96,"byte_end":116,"line_start":4,"line_end":4,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use std::ops::Range;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::ops::Range`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::ops::Range;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `GameStateBullying`, `Player`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":7847,"byte_end":7864,"line_start":259,"line_end":259,"column_start":34,"column_end":51,"is_primary":true,"text":[{"text":"    use crate::data_structures::{GameStateBullying, Player};","highlight_start":34,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":7866,"byte_end":7872,"line_start":259,"line_end":259,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"    use crate::data_structures::{GameStateBullying, Player};","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":7818,"byte_end":7874,"line_start":259,"line_end":259,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    use crate::data_structures::{GameStateBullying, Player};","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `GameStateBullying`, `Player`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs:259:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    use crate::data_structures::{GameStateBullying, Player};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `data_structures::GameStateBullying: std::hash::Hash` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":266,"byte_end":283,"line_start":10,"line_end":10,"column_start":14,"column_end":31,"is_primary":true,"text":[{"text":"    Bullying(GameStateBullying),","highlight_start":14,"highlight_end":31}],"label":"the trait `std::hash::Hash` is not implemented for `data_structures::GameStateBullying`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":176,"byte_end":180,"line_start":7,"line_end":7,"column_start":41,"column_end":45,"is_primary":false,"text":[{"text":"#[derive(Serialize, Deserialize, Debug, Hash, Eq, PartialEq, Clone)]","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Hash)]","def_site_span":{"file_name":"<::core::hash::macros::Hash macros>","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"($ item : item) => { }","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/hash/mod.rs","byte_start":4302,"byte_end":4303,"line_start":176,"line_end":176,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"","highlight_start":13,"highlight_end":14}],"label":"required by this bound in `std::hash::Hash::hash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `data_structures::GameStateBullying: std::hash::Hash` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs:10:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Bullying(GameStateBullying),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::hash::Hash` is not implemented for `data_structures::GameStateBullying`\u001b[0m\n\n"}
{"message":"the trait bound `data_structures::GameStateBullying: std::hash::Hash` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":431,"byte_end":448,"line_start":17,"line_end":17,"column_start":14,"column_end":31,"is_primary":true,"text":[{"text":"    Bullying(GameStateBullying),","highlight_start":14,"highlight_end":31}],"label":"the trait `std::hash::Hash` is not implemented for `data_structures::GameStateBullying`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":347,"byte_end":351,"line_start":14,"line_end":14,"column_start":41,"column_end":45,"is_primary":false,"text":[{"text":"#[derive(Serialize, Deserialize, Debug, Hash, Eq, PartialEq, Clone)]","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Hash)]","def_site_span":{"file_name":"<::core::hash::macros::Hash macros>","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"($ item : item) => { }","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/hash/mod.rs","byte_start":4302,"byte_end":4303,"line_start":176,"line_end":176,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"","highlight_start":13,"highlight_end":14}],"label":"required by this bound in `std::hash::Hash::hash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `data_structures::GameStateBullying: std::hash::Hash` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs:17:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Bullying(GameStateBullying),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::hash::Hash` is not implemented for `data_structures::GameStateBullying`\u001b[0m\n\n"}
{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":5373,"byte_end":5645,"line_start":188,"line_end":197,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        GameStateBullying {","highlight_start":9,"highlight_end":28},{"text":"            players,","highlight_start":1,"highlight_end":21},{"text":"            games_won_of_players,","highlight_start":1,"highlight_end":34},{"text":"            cards_in_stock,","highlight_start":1,"highlight_end":28},{"text":"            cards_played: Vec::new(),","highlight_start":1,"highlight_end":38},{"text":"            cards_of_players,","highlight_start":1,"highlight_end":30},{"text":"            available_moves_of_players,","highlight_start":1,"highlight_end":40},{"text":"            current_turn,","highlight_start":1,"highlight_end":26},{"text":"            draw_stack: 0","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"<::std::macros::panic macros>","byte_start":213,"byte_end":300,"line_start":5,"line_end":6,"column_start":6,"column_end":55,"is_primary":false,"text":[{"text":"     $ crate :: rt :: begin_panic_fmt","highlight_start":6,"highlight_end":38},{"text":"     (& $ crate :: format_args ! ($ fmt, $ ($ arg) +))","highlight_start":1,"highlight_end":55}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::todo macros>","byte_start":65,"byte_end":140,"line_start":2,"line_end":2,"column_start":2,"column_end":77,"is_primary":false,"text":[{"text":"(panic ! (\"not yet implemented: {}\", $ crate :: format_args ! ($ ($ arg) +)))","highlight_start":2,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs","byte_start":5340,"byte_end":5363,"line_start":186,"line_end":186,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        todo!(\"Fix this shit\");","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"todo!","def_site_span":{"file_name":"<::core::macros::todo macros>","byte_start":0,"byte_end":143,"line_start":1,"line_end":3,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"() => (panic ! (\"not yet implemented\")) ; ($ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":64},{"text":"(panic ! (\"not yet implemented: {}\", $ crate :: format_args ! ($ ($ arg) +)))","highlight_start":1,"highlight_end":78},{"text":";","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"<::std::macros::panic macros>","byte_start":0,"byte_end":306,"line_start":1,"line_end":7,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"() => ({ $ crate :: panic ! (\"explicit panic\") }) ; ($ msg : expr) =>","highlight_start":1,"highlight_end":70},{"text":"({ $ crate :: rt :: begin_panic ($ msg) }) ; ($ msg : expr,) =>","highlight_start":1,"highlight_end":64},{"text":"({ $ crate :: panic ! ($ msg) }) ; ($ fmt : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":71},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     $ crate :: rt :: begin_panic_fmt","highlight_start":1,"highlight_end":38},{"text":"     (& $ crate :: format_args ! ($ fmt, $ ($ arg) +))","highlight_start":1,"highlight_end":55},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nils/git/just_another_card_game/shared_lib/src/data_structures.rs:188:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        todo!(\"Fix this shit\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        GameStateBullying {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            players,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            games_won_of_players,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            cards_in_stock,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            draw_stack: 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
